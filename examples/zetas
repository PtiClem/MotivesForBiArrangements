gap> A := BlueMultizetaBiOS( [ 2 ] );;
gap> flats := Flats( A.matroid );; S := flats[Length( flats )][1];; PrintArray( OrlikSolomonBicomplexDimensions( A, S ) );
[ [  1,  3,  3,  0 ],
  [  3,  5,  3,  0 ],
  [  3,  2,  0,  0 ],
  [  1,  0,  0,  0 ] ]
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 1, 0 ) );
[ [  0,  0,  0 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) );
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 2, 0, 1, 0 ) );
[ [  -1,   1,   0 ],
  [  -1,   0,   1 ],
  [   0,  -1,   1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 3, 0, 2, 0 ) );
[ [   1,  -1,   1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 1, 0, 1 ) );
[ [  1,  0,  0 ],
  [  0,  0,  1 ],
  [  0,  1,  0 ],
  [  0,  1,  1 ],
  [  1,  1,  0 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 2, 1, 1, 1 ) );
[ [   0,  -1,  -1,   1,   0 ],
  [  -1,   0,  -1,   0,   1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 2, 0, 2 ) );
[ [  1,  0,  0 ],
  [  0,  1,  0 ],
  [  0,  0,  1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) );
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 1, 0, 2 ) );
[ [   0,  -1,  -1 ],
  [  -1,   1,   0 ],
  [   1,   0,   1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 1, 1 ) );
[ [  1,  1,  1,  0,  0 ],
  [  1,  0,  0,  1,  0 ],
  [  0,  1,  0,  0,  1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 1, 1, 2 ) );
[ [   0,  -1,  -1 ],
  [   1,   0,   1 ],
  [  -1,   1,   0 ],
  [   0,   1,   1 ],
  [  -1,   0,  -1 ] ]

A morphism in Category of matrices over Q
gap> Display( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 2, 0, 2, 1 ) );
[ [   1,   0 ],
  [   0,   1 ],
  [  -1,   1 ] ]

A morphism in Category of matrices over Q
gap> A := RedMultizetaBiOS( [ 2 ] );;
gap> flats := Flats( A.matroid );; S := flats[Length( flats )][1];; PrintArray( OrlikSolomonBicomplexDimensions( A, S ) );
[ [  1,  3,  3,  1 ],
  [  3,  5,  2,  0 ],
  [  3,  3,  0,  0 ],
  [  0,  0,  0,  0 ] ]
gap> A := BlueMultizetaBiOS( [ 2 ] );;
gap> flats := Flats( A.matroid );; S := flats[Length( flats )][1];; PrintArray( OrlikSolomonBicomplexDimensions( A, S ) );
[ [  1,  3,  3,  0 ],
  [  3,  5,  3,  0 ],
  [  3,  2,  0,  0 ],
  [  1,  0,  0,  0 ] ]
gap> 
gap> B := RedMultizetaBiOS( [ 2 ] );;
gap> flats := Flats( A.matroid );; S := flats[Length( flats )][1];; PrintArray( OrlikSolomonBicomplexDimensions( A, S ) );
[ [  1,  3,  3,  0 ],
  [  3,  5,  3,  0 ],
  [  3,  2,  0,  0 ],
  [  1,  0,  0,  0 ] ]
gap> flats := Flats( B.matroid );; S := flats[Length( flats )][1];; PrintArray( OrlikSolomonBicomplexDimensions( B, S ) );
[ [  1,  3,  3,  1 ],
  [  3,  5,  2,  0 ],
  [  3,  3,  0,  0 ],
  [  0,  0,  0,  0 ] ]
gap> OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) = OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 );
false
gap> OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) = OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 );
false
gap> OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) = OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `IsEqualForObjects' on 2 arguments called from
IsEqualForObjects( Source( morphism_1 ), Source( morphism_2 ) ) at /Users/imjprg/juteau/gap4r8/pkg/CAP_project/CAP/gap/CategoryMorphisms.gi:158 called from
<function "unknown">( <arguments> )
 called from read-eval loop at line 132 of *stdin*
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> Display( morphism_1 );
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q
brk> Display( morphism_2 );
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q
brk> gap> UnderlyingMorphism;
<Attribute "UnderlyingMorphism">
gap> UnderlyingMatrix;
<Attribute "UnderlyingMatrix">
gap> UnderlyingMatrix( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) ) =
> TransposedMat( UnderlyingMatrix( OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) ) );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `TransposedMatImmutable' on 1 arguments called from
<function "HANDLE_METHOD_NOT_FOUND">( <arguments> )
 called from read-eval loop at line 135 of *stdin*
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> UnderlyingMatrix( OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) )
> ;
<A non-zero left invertible 3 x 1 matrix over an internal ring>
brk> gap> UnderlyingMatrix( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) ) =
> Involution( UnderlyingMatrix( OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) ) );
false
gap> Involution( UnderlyingMatrix( OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) ) );
<An unevaluated non-zero right invertible 1 x 3 matrix over an internal ring>
gap> Display( Involution( UnderlyingMatrix( OrlikSolomonBicomplexDifferential( B, [ 1, 2, 3, 4, 5, 6 ], 1, 0, 0, 0 ) ) ) );
[ [  1,  1,  1 ] ]
gap> Display( UnderlyingMatrix( OrlikSolomonBicomplexDifferential( A, [ 1, 2, 3, 4, 5, 6 ], 0, 0, 0, 1 ) ) );
[ [  1,  1,  1 ] ]
gap> A.rank;
function( x ) ... end
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r;
> 	
> 	r := A.rank( Sigma );
> 
> 	for j in [ 0 .. r - 1 ] do
Syntax warning: unbound global variable
	for j in [ 0 .. r - 1 ] do
	       ^
> 		for i in [ 0 .. r - j ] do
Syntax warning: unbound global variable
		for i in [ 0 .. r - j ] do
		       ^
> 			Print( JoinStringsWithSeparator( i + 1, j, i, j), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i + 1, j, i, j ) );
> 		od;
> 	od;
> 	
> 	for i in [ 0 .. r - 1 ] do
Syntax warning: unbound global variable
	for i in [ 0 .. r - 1 ] do
	       ^
> 		for j in [ 0 .. r - i ] do
Syntax warning: unbound global variable
		for j in [ 0 .. r - i ] do
		       ^
> 			Print( JoinStringsWithSeparator( i, j, i, j + 1), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i, j, i, j + 1 ) );
> 		od;
> 	od;
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	for j in [ 0 .. r - 1 ] do
> 		for i in [ 0 .. r - j ] do
> 			Print( JoinStringsWithSeparator( i + 1, j, i, j), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i + 1, j, i, j ) );
> 		od;
> 	od;
> 	
> 	for i in [ 0 .. r - 1 ] do
> 		for j in [ 0 .. r - i ] do
> 			Print( JoinStringsWithSeparator( i, j, i, j + 1), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i, j, i, j + 1 ) );
> 		od;
> 	od;
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `ListOp' on 2 arguments called from
CallFuncList( ListOp, arg ) at /Users/imjprg/juteau/gap4r8/lib/coll.gi:758 called from
List( arg[1], String ) at /Users/imjprg/juteau/gap4r8/lib/string.gi:710 called from
JoinStringsWithSeparator( i + 1, j, i, j ) at *stdin*:167 called from
<function "OrlikSolomonBicomplexDifferentials">( <arguments> )
 called from read-eval loop at line 179 of *stdin*
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	for j in [ 0 .. r - 1 ] do
> 		for i in [ 0 .. r - j ] do
> 			Print( JoinStringsWithSeparator( [ i + 1, j, i, j ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i + 1, j, i, j ) );
> 		od;
> 	od;
> 	
> 	for i in [ 0 .. r - 1 ] do
> 		for j in [ 0 .. r - i ] do
> 			Print( JoinStringsWithSeparator( [ i, j, i, j + 1 ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i, j, i, j + 1 ) );
> 		od;
> 	od;
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );
1,0,0,0
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q
2,0,1,0
[ [  -1,   1,   0 ],
  [  -1,   0,   1 ],
  [   0,  -1,   1 ] ]

A morphism in Category of matrices over Q
3,0,2,0
[ [   1,  -1,   1 ] ]

A morphism in Category of matrices over Q
4,0,3,0
(an empty 0 x 1 matrix)

A zero, split monomorphism in Category of matrices over Q
1,1,0,1
[ [  1,  0,  0 ],
  [  0,  0,  1 ],
  [  0,  1,  0 ],
  [  0,  1,  1 ],
  [  1,  1,  0 ] ]

A morphism in Category of matrices over Q
2,1,1,1
[ [   0,  -1,  -1,   1,   0 ],
  [  -1,   0,  -1,   0,   1 ] ]

A morphism in Category of matrices over Q
3,1,2,1
(an empty 0 x 2 matrix)

A zero, split monomorphism in Category of matrices over Q
1,2,0,2
[ [  1,  0,  0 ],
  [  0,  1,  0 ],
  [  0,  0,  1 ] ]

A morphism in Category of matrices over Q
2,2,1,2
(an empty 0 x 3 matrix)

A zero, split monomorphism in Category of matrices over Q
0,0,0,1
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q
0,1,0,2
[ [   0,  -1,  -1 ],
  [  -1,   1,   0 ],
  [   1,   0,   1 ] ]

A morphism in Category of matrices over Q
0,2,0,3
(an empty 3 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q
0,3,0,4
(an empty 0 x 0 matrix)

A zero, isomorphism in Category of matrices over Q
1,0,1,1
[ [  1,  1,  1,  0,  0 ],
  [  1,  0,  0,  1,  0 ],
  [  0,  1,  0,  0,  1 ] ]

A morphism in Category of matrices over Q
1,1,1,2
[ [   0,  -1,  -1 ],
  [   1,   0,   1 ],
  [  -1,   1,   0 ],
  [   0,   1,   1 ],
  [  -1,   0,  -1 ] ]

A morphism in Category of matrices over Q
1,2,1,3
(an empty 3 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q
2,0,2,1
[ [   1,   0 ],
  [   0,   1 ],
  [  -1,   1 ] ]

A morphism in Category of matrices over Q
2,1,2,2
(an empty 2 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	for j in [ 0 .. r - 1 ] do
> 		for i in [ 0 .. r - j ] do
> 			Print( JoinStringsWithSeparator( [ i + 1, j, i, j ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i + 1, j, i, j ) );
> 			Print( "\n" );
> 		od;
> 	od;
> 	
> 	for i in [ 0 .. r - 1 ] do
> 		for j in [ 0 .. r - i ] do
> 			Print( JoinStringsWithSeparator( [ i, j, i, j + 1 ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i, j, i, j + 1 ) );
> 			Print( "\n" );		od;
> 	od;
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );
1,0,0,0
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q

2,0,1,0
[ [  -1,   1,   0 ],
  [  -1,   0,   1 ],
  [   0,  -1,   1 ] ]

A morphism in Category of matrices over Q

3,0,2,0
[ [   1,  -1,   1 ] ]

A morphism in Category of matrices over Q

4,0,3,0
(an empty 0 x 1 matrix)

A zero, split monomorphism in Category of matrices over Q

1,1,0,1
[ [  1,  0,  0 ],
  [  0,  0,  1 ],
  [  0,  1,  0 ],
  [  0,  1,  1 ],
  [  1,  1,  0 ] ]

A morphism in Category of matrices over Q

2,1,1,1
[ [   0,  -1,  -1,   1,   0 ],
  [  -1,   0,  -1,   0,   1 ] ]

A morphism in Category of matrices over Q

3,1,2,1
(an empty 0 x 2 matrix)

A zero, split monomorphism in Category of matrices over Q

1,2,0,2
[ [  1,  0,  0 ],
  [  0,  1,  0 ],
  [  0,  0,  1 ] ]

A morphism in Category of matrices over Q

2,2,1,2
(an empty 0 x 3 matrix)

A zero, split monomorphism in Category of matrices over Q

0,0,0,1
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q

0,1,0,2
[ [   0,  -1,  -1 ],
  [  -1,   1,   0 ],
  [   1,   0,   1 ] ]

A morphism in Category of matrices over Q

0,2,0,3
(an empty 3 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q

0,3,0,4
(an empty 0 x 0 matrix)

A zero, isomorphism in Category of matrices over Q

1,0,1,1
[ [  1,  1,  1,  0,  0 ],
  [  1,  0,  0,  1,  0 ],
  [  0,  1,  0,  0,  1 ] ]

A morphism in Category of matrices over Q

1,1,1,2
[ [   0,  -1,  -1 ],
  [   1,   0,   1 ],
  [  -1,   1,   0 ],
  [   0,   1,   1 ],
  [  -1,   0,  -1 ] ]

A morphism in Category of matrices over Q

1,2,1,3
(an empty 3 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q

2,0,2,1
[ [   1,   0 ],
  [   0,   1 ],
  [  -1,   1 ] ]

A morphism in Category of matrices over Q

2,1,2,2
(an empty 2 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q

gap> 
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	for j in [ 0 .. r - 1 ] do
> 		for i in [ 0 .. r - j - 1 ] do
> 			Print( JoinStringsWithSeparator( [ i + 1, j, i, j ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i + 1, j, i, j ) );
> 			Print( "\n" );
> 		od;
> 	od;
> 	
> 	for i in [ 0 .. r - 1 ] do
> 		for j in [ 0 .. r - i - 1 ] do
> 			Print( JoinStringsWithSeparator( [ i, j, i, j + 1 ] ), "\n");
> 			Display( OrlikSolomonBicomplexDifferential( A, Sigma, i, j, i, j + 1 ) );
> 			Print( "\n" );		od;
> 	od;
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );
1,0,0,0
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q

2,0,1,0
[ [  -1,   1,   0 ],
  [  -1,   0,   1 ],
  [   0,  -1,   1 ] ]

A morphism in Category of matrices over Q

3,0,2,0
[ [   1,  -1,   1 ] ]

A morphism in Category of matrices over Q

1,1,0,1
[ [  1,  0,  0 ],
  [  0,  0,  1 ],
  [  0,  1,  0 ],
  [  0,  1,  1 ],
  [  1,  1,  0 ] ]

A morphism in Category of matrices over Q

2,1,1,1
[ [   0,  -1,  -1,   1,   0 ],
  [  -1,   0,  -1,   0,   1 ] ]

A morphism in Category of matrices over Q

1,2,0,2
[ [  1,  0,  0 ],
  [  0,  1,  0 ],
  [  0,  0,  1 ] ]

A morphism in Category of matrices over Q

0,0,0,1
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q

0,1,0,2
[ [   0,  -1,  -1 ],
  [  -1,   1,   0 ],
  [   1,   0,   1 ] ]

A morphism in Category of matrices over Q

0,2,0,3
(an empty 3 x 0 matrix)

A zero, split epimorphism in Category of matrices over Q

1,0,1,1
[ [  1,  1,  1,  0,  0 ],
  [  1,  0,  0,  1,  0 ],
  [  0,  1,  0,  0,  1 ] ]

A morphism in Category of matrices over Q

1,1,1,2
[ [   0,  -1,  -1 ],
  [   1,   0,   1 ],
  [  -1,   1,   0 ],
  [   0,   1,   1 ],
  [  -1,   0,  -1 ] ]

A morphism in Category of matrices over Q

2,0,2,1
[ [   1,   0 ],
  [   0,   1 ],
  [  -1,   1 ] ]

A morphism in Category of matrices over Q

gap> HELP("IsExactSequence");
gap> OrlikSolomonBicomplexDifferentials( B, [ 1, 2, 3, 4, 5, 6 ] );
1,0,0,0
[ [  1 ],
  [  1 ],
  [  1 ] ]

A morphism in Category of matrices over Q

2,0,1,0
[ [  -1,   1,   0 ],
  [  -1,   0,   1 ],
  [   0,  -1,   1 ] ]

A morphism in Category of matrices over Q

3,0,2,0
(an empty 0 x 3 matrix)

A zero, split monomorphism in Category of matrices over Q

1,1,0,1
[ [  1,  0,  0 ],
  [  0,  0,  1 ],
  [  0,  1,  0 ],
  [  0,  1,  1 ],
  [  1,  1,  0 ] ]

A morphism in Category of matrices over Q

2,1,1,1
[ [   0,  -1,  -1,   1,   0 ],
  [  -1,   0,  -1,   0,   1 ],
  [  -1,   1,   0,  -1,   1 ] ]

A morphism in Category of matrices over Q

1,2,0,2
[ [   0,   1,   1 ],
  [  -1,   0,  -1 ] ]

A morphism in Category of matrices over Q

0,0,0,1
[ [  1,  1,  1 ] ]

A morphism in Category of matrices over Q

0,1,0,2
[ [   0,  -1,  -1 ],
  [  -1,   1,   0 ],
  [   1,   0,   1 ] ]

A morphism in Category of matrices over Q

0,2,0,3
[ [  -1 ],
  [  -1 ],
  [   1 ] ]

A morphism in Category of matrices over Q

1,0,1,1
[ [  1,  1,  1,  0,  0 ],
  [  1,  0,  0,  1,  0 ],
  [  0,  1,  0,  0,  1 ] ]

A morphism in Category of matrices over Q

1,1,1,2
[ [  -1,   0 ],
  [   0,  -1 ],
  [   1,   1 ],
  [   1,   0 ],
  [   0,   1 ] ]

A morphism in Category of matrices over Q

2,0,2,1
[ [  1,  0,  0 ],
  [  0,  1,  0 ],
  [  0,  0,  1 ] ]

A morphism in Category of matrices over Q

gap> rec();
rec(  )
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, hor, ver, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	hor := [];
> 	for i in [ 0 .. r - 1] do
> 		hor[i] := [];
> 		for j in [ 0 .. r ] do
> 			hor[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i - 1, j ) );
Syntax error: ; expected
			hor[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i - 1, j ) );
			                                                                                           ^
> 		od;
> 	od;
> 	
> 	ver := [];
> 	for i in [ 0 .. r ] do
> 		ver[i] := [];
> 		for j in [ 0 .. r - 1 ] do
> 			ver[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i, j + 1 ) );
Syntax error: ; expected
			ver[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i, j + 1 ) );
			                                                                                           ^
> 			Print( "\n" );		od;
> 	od;
> 	
> 	return rec( hor := hor, ver := ver );
> end;
gap> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, hor, ver, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	hor := [];
> 	for i in [ 0 .. r - 1] do
> 		hor[i] := [];
> 		for j in [ 0 .. r ] do
> 			hor[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i - 1, j );
> 		od;
> 	od;
> 	
> 	ver := [];
> 	for i in [ 0 .. r ] do
> 		ver[i] := [];
> 		for j in [ 0 .. r - 1 ] do
> 			ver[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i, j + 1 );
> 			Print( "\n" );		od;
> 	od;
> 	
> 	return rec( hor := hor, ver := ver );
> end;
function( A, Sigma ) ... end
gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `[]:=' on 3 arguments called from
A.rank( Sigma ) at *stdin*:271 called from
<function "OrlikSolomonBicomplexDifferentials">( <arguments> )
 called from read-eval loop at line 291 of *stdin*
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> OrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local r, hor, ver, i, j;
> 	
> 	r := A.rank( Sigma );
> 
> 	hor := [];
> 	for i in [ 0 .. r - 1] do
> 		hor[i + 1] := [];
> 		for j in [ 0 .. r ] do
> 			hor[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i - 1, j );
> 		od;
> 	od;
> 	
> 	ver := [];
> 	for i in [ 0 .. r ] do
> 		ver[i + 1] := [];
> 		for j in [ 0 .. r - 1 ] do
> 			ver[i + 1][j + 1] := OrlikSolomonBicomplexDifferential( A, Sigma, r - i, j, r - i, j + 1 );
> 			Print( "\n" );		od;
> 	od;
> 	
> 	return rec( hor := hor, ver := ver );
> end;
function( A, Sigma ) ... end
brk> gap> OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );












rec( hor := [ [ <A morphism in Category of matrices over Q>, <A zero, split monomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q>, 
          <A zero, isomorphism in Category of matrices over Q> ], [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, 
          <A zero, split monomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, 
          <A zero, isomorphism in Category of matrices over Q> ] ], 
  ver := [ [ <A zero, split epimorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q> ] ] )
gap> Display( hor );
Error, Variable: 'hor' must have a value
not in any function at line 292 of *stdin*
gap> record :=OrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );












rec( hor := [ [ <A morphism in Category of matrices over Q>, <A zero, split monomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q>, 
          <A zero, isomorphism in Category of matrices over Q> ], [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, 
          <A zero, split monomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, 
          <A zero, isomorphism in Category of matrices over Q> ] ], 
  ver := [ [ <A zero, split epimorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q>, <A zero, isomorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q> ], 
      [ <A morphism in Category of matrices over Q>, <A morphism in Category of matrices over Q>, <A zero, split epimorphism in Category of matrices over Q> ] ] )
gap> Display( record.hor );
[ [ A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q ], 
  [ A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q ], 
  [ A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q, A morphism in Category of matrices over Q ] ]
gap> DimensionsMat( record.hor );
Error, no method found! For debugging hints type ?Recovery from NoMethodFound
Error, no 1st choice method found for `DimensionsMat' on 1 arguments called from
<function "HANDLE_METHOD_NOT_FOUND">( <arguments> )
 called from read-eval loop at line 295 of *stdin*
you can 'quit;' to quit to outer loop, or
you can 'return;' to continue
brk> gap> DisplayOrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local record;
> 	
> 	record := OrlikSolomonBicomplexDifferentials( A, Sigma );
> 
> 	hor := [];	
Syntax warning: unbound global variable
	hor := [];	
	     ^
> 	for i in [ 1 .. Length( record.hor ) do
Syntax warning: unbound global variable
	for i in [ 1 .. Length( record.hor ) do
	       ^
Syntax error: ] expected
	for i in [ 1 .. Length( record.hor ) do
	                                      ^
> 		hor[i] := [];
Syntax warning: unbound global variable
		hor[i] := [];
		   ^
> 		for j in [ 1 .. Length( record.hor[i] ) ] do
Syntax warning: unbound global variable
		for j in [ 1 .. Length( record.hor[i] ) ] do
		       ^
> 			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
Syntax warning: unbound global variable
			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
			   ^
Syntax warning: unbound global variable
			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
			        ^
Syntax warning: unbound global variable
			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
			                                              ^
> 		od; 
> 	od;
> 	
> 	ver := [];	
Syntax warning: unbound global variable
	ver := [];	
	     ^
> 	for i in [ 1 .. Length( record.ver ) do
Syntax error: ] expected
	for i in [ 1 .. Length( record.ver ) do
	                                      ^
> 		ver[i] := [];
Syntax warning: unbound global variable
		ver[i] := [];
		   ^
> 		for j in [ 1 .. Length( record.ver[i] ) ] do
Syntax warning: unbound global variable
		for j in [ 1 .. Length( record.ver[i] ) ] do
		       ^
> 			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
Syntax warning: unbound global variable
			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
			   ^
Syntax warning: unbound global variable
			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
			        ^
Syntax warning: unbound global variable
			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
			                                              ^
> 		od; 
> 	od;
> 	
> 	PrintArray(hor);
Syntax warning: unbound global variable
	PrintArray(hor);
	              ^
> 	PrintArray(ver);
Syntax warning: unbound global variable
	PrintArray(ver);
	              ^
> 	
> end;
gap> DisplayOrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local record, hor, ver, i, j;
> 	
> 	record := OrlikSolomonBicomplexDifferentials( A, Sigma );
> 
> 	hor := [];	
> 	for i in [ 1 .. Length( record.hor ) do
Syntax error: ] expected
	for i in [ 1 .. Length( record.hor ) do
	                                      ^
> 		hor[i] := [];
> 		for j in [ 1 .. Length( record.hor[i] ) ] do
> 			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
> 		od; 
> 	od;
> 	
> 	ver := [];	
> 	for i in [ 1 .. Length( record.ver ) do
Syntax error: ] expected
	for i in [ 1 .. Length( record.ver ) do
	                                      ^
> 		ver[i] := [];
> 		for j in [ 1 .. Length( record.ver[i] ) ] do
> 			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
> 		od; 
> 	od;
> 	
> 	PrintArray(hor);
> 	PrintArray(ver);
> 	
> end;DisplayOrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local record, hor, ver, i, j;
> 	
> 	record := OrlikSolomonBicomplexDifferentials( A, Sigma );
> 
> 	hor := [];	
> 	for i in [ 1 .. Length( record.hor ) ] do
> 		hor[i] := [];
> 		for j in [ 1 .. Length( record.hor[i] ) ] do
> 			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
> 		od; 
> 	od;
> 	
> 	ver := [];	
> 	for i in [ 1 .. Length( record.ver ) ] do
> 		ver[i] := [];
> 		for j in [ 1 .. Length( record.ver[i] ) ] do
> 			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
> 		od; 
> 	od;
> 	
> 	PrintArray(hor);
> 	PrintArray(ver);
> 	
> end;
function( A, Sigma ) ... end
gap> DisplayOrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );












[ [  <object>,  <object>,  <object>,  <object> ],
  [  <object>,  <object>,  <object>,  <object> ],
  [  <object>,  <object>,  <object>,  <object> ] ]
[ [  <object>,  <object>,  <object> ],
  [  <object>,  <object>,  <object> ],
  [  <object>,  <object>,  <object> ],
  [  <object>,  <object>,  <object> ] ]
gap> DisplayOrlikSolomonBicomplexDifferentials := function( A, Sigma )
> 	local record, hor, ver, i, j;
> 	
> 	record := OrlikSolomonBicomplexDifferentials( A, Sigma );
> 
> 	hor := [];	
> 	for i in [ 1 .. Length( record.hor ) ] do
> 		hor[i] := [];
> 		for j in [ 1 .. Length( record.hor[i] ) ] do
> 			hor[i][j] := UnderlyingMatrix( record.hor[i][j] );
> 		od; 
> 	od;
> 	
> 	ver := [];	
> 	for i in [ 1 .. Length( record.ver ) ] do
> 		ver[i] := [];
> 		for j in [ 1 .. Length( record.ver[i] ) ] do
> 			ver[i][j] := UnderlyingMatrix( record.ver[i][j] );
> 		od; 
> 	od;
> 	
> 	Print(hor);
> 	Print(ver);
> 	
> end;
function( A, Sigma ) ... end
gap> DisplayOrlikSolomonBicomplexDifferentials( A, [ 1, 2, 3, 4, 5, 6 ] );












[ [ <object>, <object>, <object>, <object> ], [ <object>, <object>, <object>, <object> ], [ <object>, <object>, <object>, <object> ] ][ [ <object>, <object>, <object> ], 
  [ <object>, <object>, <object> ], [ <object>, <object>, <object> ], [ <object>, <object>, <object> ] ]
gap> 